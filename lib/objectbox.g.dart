// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'data/model/entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 597130556451188388),
      name: 'FinModel',
      lastPropertyId: const IdUid(8, 39133564886841683),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4744817255215986416),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 155531120544504958),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4098436630676729430),
            name: 'comments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 555389358704609282),
            name: 'createdTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6034036192599840009),
            name: 'updatedTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5045220341359881580),
            name: 'tagId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2092550809899515516),
            relationTarget: 'TagModel'),
        ModelProperty(
            id: const IdUid(8, 39133564886841683),
            name: 'type',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8272142424421629591),
      name: 'TagModel',
      lastPropertyId: const IdUid(2, 8757494339460393390),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1212724362084966985),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8757494339460393390),
            name: 'tag',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'orders', srcEntity: 'FinModel', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8272142424421629591),
      lastIndexId: const IdUid(2, 2085572409331026832),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [2085572409331026832],
      retiredPropertyUids: const [5527779836469731786],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FinModel: EntityDefinition<FinModel>(
        model: _entities[0],
        toOneRelations: (FinModel object) => [object.tag],
        toManyRelations: (FinModel object) => {},
        getId: (FinModel object) => object.id,
        setId: (FinModel object, int id) {
          object.id = id;
        },
        objectToFB: (FinModel object, fb.Builder fbb) {
          final commentsOffset = fbb.writeString(object.comments);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.price);
          fbb.addOffset(2, commentsOffset);
          fbb.addInt64(3, object.createdTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedTime.millisecondsSinceEpoch);
          fbb.addInt64(5, object.tag.targetId);
          fbb.addBool(7, object.type);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FinModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              comments: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              createdTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              updatedTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              type: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false));
          object.tag.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.tag.attach(store);
          return object;
        }),
    TagModel: EntityDefinition<TagModel>(
        model: _entities[1],
        toOneRelations: (TagModel object) => [],
        toManyRelations: (TagModel object) => {
              RelInfo<FinModel>.toOneBacklink(
                      6, object.id, (FinModel srcObject) => srcObject.tag):
                  object.orders
            },
        getId: (TagModel object) => object.id,
        setId: (TagModel object, int id) {
          object.id = id;
        },
        objectToFB: (TagModel object, fb.Builder fbb) {
          final tagOffset = fbb.writeString(object.tag);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tagOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TagModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tag: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(
              object.orders,
              store,
              RelInfo<FinModel>.toOneBacklink(
                  6, object.id, (FinModel srcObject) => srcObject.tag),
              store.box<TagModel>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FinModel] entity fields to define ObjectBox queries.
class FinModel_ {
  /// see [FinModel.id]
  static final id = QueryIntegerProperty<FinModel>(_entities[0].properties[0]);

  /// see [FinModel.price]
  static final price =
      QueryDoubleProperty<FinModel>(_entities[0].properties[1]);

  /// see [FinModel.comments]
  static final comments =
      QueryStringProperty<FinModel>(_entities[0].properties[2]);

  /// see [FinModel.createdTime]
  static final createdTime =
      QueryIntegerProperty<FinModel>(_entities[0].properties[3]);

  /// see [FinModel.updatedTime]
  static final updatedTime =
      QueryIntegerProperty<FinModel>(_entities[0].properties[4]);

  /// see [FinModel.tag]
  static final tag =
      QueryRelationToOne<FinModel, TagModel>(_entities[0].properties[5]);

  /// see [FinModel.type]
  static final type =
      QueryBooleanProperty<FinModel>(_entities[0].properties[6]);
}

/// [TagModel] entity fields to define ObjectBox queries.
class TagModel_ {
  /// see [TagModel.id]
  static final id = QueryIntegerProperty<TagModel>(_entities[1].properties[0]);

  /// see [TagModel.tag]
  static final tag = QueryStringProperty<TagModel>(_entities[1].properties[1]);
}
